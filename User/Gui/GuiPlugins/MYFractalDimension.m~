classdef MYFractalDimension < PTKPlugin
    % MYFractalDimension. Plugin for calculating fractal dimension for
    % heterogeneity analysis.
    %
    %     This is a plugin for a self-built function of the Pulmonary Toolkit. Plugins can be run using
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See PTKPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image with true airway points shown as blue
    %     and explosion points shown in red.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %
    
    properties
        ButtonText = 'Fractal Dimension'
        ToolTip = 'Calculate fractal dimension for heterogeneity analysis'
        Category = 'Analysis'
        
        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results=RunPlugin(dataset,reporting)
            if nargin < 2
                reporting = PTKReportingDefault;
            end
            
            lung_roi = dataset.GetResult('PTKLungROI');
            Raw = lung_roi.RawImage;
            lungs=dataset.GetResult('PTKLeftAndRightLungs');
            Lung=lungs.RawImage;
            [a1,b1,c1]=size(Lung);
            LeftLungCoor_x=[];RightLungCoor_x=[];
            LeftLungCoor_y=[];RightLungCoor_y=[];
            LeftLungCoor_z=[];RightLungCoor_z=[];
            Left_density_value=[];Right_density_value=[];
            grid_size = 1:2:30;
            cov_matrix = zeros(length(grid_size),1);
            
            for i=1:c1
                for j=1:a1
                    for k=1:b1
                        if Lung(j,k,i)==2
                            LeftLungCoor_x=[LeftLungCoor_x,j];
                            LeftLungCoor_y=[LeftLungCoor_y,k];
                            LeftLungCoor_z=[LeftLungCoor_z,i];
                            HU_value = lungs.GrayscaleToRescaled(Raw(j,k,i));
                            density_value = double(HU_value)/1024+1;
                            Left_density_value= [Left_density_value,density_value];
                        elseif Lung(j,k,i)==1
                            RightLungCoor_x=[RightLungCoor_x,j];
                            RightLungCoor_y=[RightLungCoor_y,k];
                            RightLungCoor_z=[RightLungCoor_z,i];
                            HU_value = lungs.GrayscaleToRescaled(Raw(j,k,i));
                            density_value = double(HU_value)/1024+1;
                            Right_density_value= [Right_density_value,density_value];
                        end
                    end
                end
            end
            
            VoxelSize=lungs.VoxelSize;
            OriginalImageSize=lungs.OriginalImageSize;
            start_crop=lungs.Origin;
            LeftLungCoor_x1=(LeftLungCoor_y+start_crop(2)-1).*VoxelSize(2);
            LeftLungCoor_y1=OriginalImageSize(2).*VoxelSize(2)-(OriginalImageSize(1)-(LeftLungCoor_x+start_crop(1)-1)).*VoxelSize(1);
            LeftLungCoor_z1=-(LeftLungCoor_z+start_crop(3)-1).*VoxelSize(3);
            RightLungCoor_x1=(RightLungCoor_y+start_crop(2)-1).*VoxelSize(2);
            RightLungCoor_y1=OriginalImageSize(2).*VoxelSize(2)-(OriginalImageSize(1)-(RightLungCoor_x+start_crop(1)-1)).*VoxelSize(1);
            RightLungCoor_z1=-(RightLungCoor_z+start_crop(3)-1).*VoxelSize(3);
            
            LeftLungCoor=[LeftLungCoor_x1',LeftLungCoor_y1',LeftLungCoor_z1'];
            RightLungCoor=[RightLungCoor_x1',RightLungCoor_y1',RightLungCoor_z1'];
            
            for g = 1:length(grid_size)
                number_x_left = ceil((max(LeftLungCoor_x1) - min(LeftLungCoor_x1))./grid_size(g));
                number_y_left = ceil((max(LeftLungCoor_y1) - min(LeftLungCoor_y1))./grid_size(g));
                number_z_left = ceil((max(LeftLungCoor_z1) - min(LeftLungCoor_z1))./grid_size(g));
                number_x_right = ceil((max(RightLungCoor_x1) - min(RightLungCoor_x1))./grid_size(g));
                number_y_right = ceil((max(RightLungCoor_y1) - min(RightLungCoor_y1))./grid_size(g));
                number_z_right = ceil((max(RightLungCoor_z1) - min(RightLungCoor_z1))./grid_size(g));
                
                average_grid_density_left = [];
                average_grid_density_right = [];
                
                % Cal average density for left lung
                if grid_size(g) == 1
                    average_grid_density_left = Left_density_value;
                    average_grid_density_right = Right_density_value;
                else
                    for i = 1:number_x_left
                        for j = 1:number_y_left
                            for k = 1:number_z_left
                                x_min = min(LeftLungCoor_x1) + (i-1).*grid_size(g);
                                y_min = min(LeftLungCoor_y1) + (j-1).*grid_size(g);
                                z_min = min(LeftLungCoor_z1) + (k-1).*grid_size(g);
                                x_max = min(LeftLungCoor_x1) + i.*grid_size(g);
                                y_max = min(LeftLungCoor_y1) + j.*grid_size(g);
                                z_max = min(LeftLungCoor_z1) + k.*grid_size(g);
                                if x_max > max(LeftLungCoor_x1)
                                    x_max = max(LeftLungCoor_x1);
                                end
                                if y_max > max(LeftLungCoor_y1)
                                    y_max = max(LeftLungCoor_y1);
                                end
                                if z_max > max(LeftLungCoor_z1)
                                    z_max = max(LeftLungCoor_z1);
                                end
                                x_index = find(LeftLungCoor_x1>=x_min & LeftLungCoor_x1<=x_max);
                                y_index = find(LeftLungCoor_y1>=y_min & LeftLungCoor_y1<=y_max);
                                z_index = find(LeftLungCoor_z1>=z_min & LeftLungCoor_z1<=z_max);
                                current_index_left = intersect(x_index, y_index);
                                current_index_left = intersect(current_index_left, z_index);
                                if ~isempty(current_index_left)
                                    current_average_density = sum(Left_density_value(current_index_left))./length(current_index_left);
                                    average_grid_density_left = [average_grid_density_left,current_average_density];
                                end
                            end
                        end
                    end
                    
                    % Cal average density for right lung
                    for i = 1:number_x_right
                        for j = 1:number_y_right
                            for k = 1:number_z_right
                                x_min = min(RightLungCoor_x1) + (i-1).*grid_size(g);
                                y_min = min(RightLungCoor_y1) + (j-1).*grid_size(g);
                                z_min = min(RightLungCoor_z1) + (k-1).*grid_size(g);
                                x_max = min(RightLungCoor_x1) + i.*grid_size(g);
                                y_max = min(RightLungCoor_y1) + j.*grid_size(g);
                                z_max = min(RightLungCoor_z1) + k.*grid_size(g);
                                if x_max > max(RightLungCoor_x1)
                                    x_max = max(RightLungCoor_x1);
                                end
                                if y_max > max(RightLungCoor_y1)
                                    y_max = max(RightLungCoor_y1);
                                end
                                if z_max > max(RightLungCoor_z1)
                                    z_max = max(RightLungCoor_z1);
                                end
                                x_index = find(RightLungCoor_x1>=x_min & RightLungCoor_x1<=x_max);
                                y_index = find(RightLungCoor_y1>=y_min & RightLungCoor_y1<=y_max);
                                z_index = find(RightLungCoor_z1>=z_min & RightLungCoor_z1<=z_max);
                                current_index_right = intersect(x_index, y_index);
                                current_index_right = intersect(current_index_right, z_index);
                                if ~isempty(current_index_right)
                                    current_average_density = sum(Right_density_value(current_index_right))./length(current_index_right);
                                    average_grid_density_right = [average_grid_density_right,current_average_density];
                                end
                            end
                        end
                    end
                end
                total_average_grid_density = [average_grid_density_left, average_grid_density_right];
                current_std = std(total_average_grid_density);
                current_mean = mean(total_average_grid_density);
                cov_matrix(g) = current_std./current_mean;
            end
            grid_size = grid_size'
            cov_matrix
            log_size = log(grid_size);
            log_cov = log(cov_matrix);
            p = polyfit(log_size,log_cov,1)
            fractal_dimension = 1- p(1)
            figure();
            set(gca,'Fontsize',20)
            plot(log_size,log_cov,'*b');
            hold on
            x=0:0.1:3.5;
            plot(x, polyval(p, x),'-r');
            xlabel('Log Box Size');
            ylabel('Log Cov');
            results = lungs.Copy;
        end
    end
end
