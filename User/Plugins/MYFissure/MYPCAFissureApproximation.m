classdef MYPCAFissureApproximation < PTKPlugin
    % PTKAirways. Plugin for viewing each Fissure data in PTK viewer
    %
    %     This is a plugin for a self-built function of the Pulmonary Toolkit. Plugins can be run using
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See PTKPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     PTKAirways calls the PTKTopOfTrachea plugin to find the trachea
    %     location, and then runs the library routine
    %     PTKAirwayRegionGrowingWithExplosionControl to obtain the
    %     airway segmentation. The results are stored in a heirarchical tree
    %     structure.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image with true airway points shown as blue
    %     and explosion points shown in red.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %
    
    properties
        ButtonText = 'PCA Fissure Plane<br> Initial guessing'
        ToolTip = 'Shows a initial fissure guessing from PCA deformation'
        Category = 'Fissures'
        
        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results = RunPlugin(dataset,reporting)
            if nargin < 2
                reporting = PTKReportingDefault;
            end
            DicomDataset = dataset.GetResult('PTKOriginalImage');%% Get the raw PTKDicom data
            ImageSize = DicomDataset.ImageSize;
            VoxelSize = DicomDataset.VoxelSize;
            row_num=ImageSize(1);col_num=ImageSize(2);sli_num=ImageSize(3);
            row_res=VoxelSize(1);col_res=VoxelSize(2);sli_res=VoxelSize(3);
            % Get PCA mesh foler path
            
            data_info = dataset.GetImageInfo;
            current_data_path = data_info.ImagePath;
            PCA_mesh_path = uigetdir(current_data_path, 'Select Directory to Read in Deformed PCA mesh');
            if PCA_mesh_path == 0
                reporting.Error('MYPCAFissureApproximation:ProgramErro', 'Can not read in PCA mesh');
            end
            
            % Call cmiss to generate data points on deformed PCA fissure mesh
            current_filename = mfilename('fullpath');
            [current_filepath,~,~] = fileparts(current_filename);
            cmiss_filename = fullfile(current_filepath, '..', '..', '..','GreateSurfaceData.com');
            linux_command = ['cm',' ', cmiss_filename];
            cd(PCA_mesh_path);
            unix(linux_command);
            
            FissureNameGroup={'LOfissure','RHfissure','ROfissure'};
            
            FissureDataMatrix=zeros(row_num,col_num,sli_num,3);FissureDataMatrix1=zeros(row_num,col_num,sli_num);
            PCA_mesh_txt_path = fullfile(PCA_mesh_path , 'TxtData');
            if ~exist(PCA_mesh_txt_path)
                mkdir(PCA_mesh_txt_path);
            end
            for i = 1:3
                FissureName = FissureNameGroup{i};
                FissureDataFileName = strcat(PCA_mesh_path, '/' , 'PCA_', FissureName, 'Data');
                OriginalFullFissureDataFileName = strcat(FissureDataFileName,'.ipdata');
                copyfile(OriginalFullFissureDataFileName,PCA_mesh_txt_path);
                MovedIpdataFullFissureDataFileName = strcat(PCA_mesh_txt_path, '/', 'PCA_', FissureName, 'Data','.ipdata');
                TXTFullFissureDataFileName = strcat(PCA_mesh_txt_path, '/',  'PCA_', FissureName, 'Data','.txt');
                movefile(MovedIpdataFullFissureDataFileName,TXTFullFissureDataFileName);% Change the name of the file
                [a1,a2,a3,a4,a5,a6,a7] = textread(TXTFullFissureDataFileName,'%s%s%s%s%s%s%s');
                x=a2(2:end);y=a3(2:end);z=a4(2:end);
                x1 = cellfun(@str2num,x); y1 = cellfun(@str2num,y); z1 = cellfun(@str2num,z);
                x2=round(x1/row_res);y2=col_num-(round((col_num*col_res-y1)/col_res));z2=round((-z1)/sli_res);
                index = sub2ind(ImageSize,y2,x2,z2);
                SubFissureDataMatrix = zeros(ImageSize);
                if i == 1
                    SubFissureDataMatrix(index) = 6;
                elseif i == 2
                    SubFissureDataMatrix(index) = 3;
                elseif i == 3
                    SubFissureDataMatrix(index) = 2;
                end
                FissureDataMatrix(:,:,:,i)=SubFissureDataMatrix;
                %                 end
                %     SE=ones(3,3,3);
                %     FissureDataMatrix(:,:,:,i)=imdilate(FissureDataMatrix(:,:,:,i),SE);
                %     FissureDataMatrix(:,:,:,i)=imerode(FissureDataMatrix(:,:,:,i),SE);
                %     FissureDataMatrix(:,:,:,i)=imfill(FissureDataMatrix(:,:,:,i),'holes');
                %     FissureDataMatrix(:,:,:,i)=FissureDataMatrix(:,:,:,i)*i;
            end
            
            for k=1:3
                FissureDataMatrix1=FissureDataMatrix1+FissureDataMatrix(:,:,:,k);
            end
            
            lungs=dataset.GetResult('PTKLeftAndRightLungs');
            results=lungs.Copy;
            [start_crop,end_crop]=MYGetLungROIForCT(DicomDataset);
            FissureDataMatrix1=FissureDataMatrix1(start_crop(1):end_crop(1),start_crop(2):end_crop(2),start_crop(3):end_crop(3));
            results.ChangeRawImage(FissureDataMatrix1);
        end
    end
end
