classdef MYSliceFractalDimension < PTKPlugin
    % MYFractalDimension. Plugin for calculating fractal dimension for
    % heterogeneity analysis.
    %
    %     This is a plugin for a self-built function of the Pulmonary Toolkit. Plugins can be run using
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See PTKPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image with true airway points shown as blue
    %     and explosion points shown in red.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %
    
    properties
        ButtonText = '2D Fractal Dimension'
        ToolTip = 'Calculate fractal dimension for heterogeneity analysis jin 2D'
        Category = 'Export'
        
        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results=RunPlugin(dataset,reporting)
            if nargin < 2
                reporting = PTKReportingDefault;
            end
            
            lung_roi = dataset.GetResult('PTKLungROI');
            Raw = lung_roi.RawImage;
            lungs=dataset.GetResult('PTKLeftAndRightLungs');
            Lung=lungs.RawImage;
            [a1,b1,c1]=size(Lung);
            LeftLungCoor_x=[];RightLungCoor_x=[];
            LeftLungCoor_y=[];RightLungCoor_y=[];
            LeftLungCoor_z=[];RightLungCoor_z=[];
            Left_density_value=[];Right_density_value=[];
            grid_size = 1:2:30;
            slice_number = [10,round(c1/100*25),round(c1/100*50),round(c1/100*75),c1-10];
            
             % Get the saving path
            data_info=dataset.GetImageInfo;
            current_data_path=data_info.ImagePath;
            save_root_path = uigetdir(current_data_path, 'Select Directory to Save Lung Surface Points');
            save_full_path=fullfile(save_root_path,'PTKFractalDimension');
            if ~exist(save_full_path)
                mkdir(save_full_path);
            end
            
            for s=slice_number
                cov_matrix = zeros(length(grid_size),1);
                for j=1:a1
                    for k=1:b1
                        if Lung(j,k,s)==2
                            LeftLungCoor_x=[LeftLungCoor_x,j];
                            LeftLungCoor_y=[LeftLungCoor_y,k];
                            HU_value = lungs.GrayscaleToRescaled(Raw(j,k,s));
                            density_value = double(HU_value)/1024+1;
                            Left_density_value= [Left_density_value,density_value];
                        elseif Lung(j,k,s)==1
                            RightLungCoor_x=[RightLungCoor_x,j];
                            RightLungCoor_y=[RightLungCoor_y,k];
                            HU_value = lungs.GrayscaleToRescaled(Raw(j,k,s));
                            density_value = double(HU_value)/1024+1;
                            Right_density_value= [Right_density_value,density_value];
                        end
                    end
                end
                for g = 1:length(grid_size)
                    number_x_left = ceil((max(LeftLungCoor_x) - min(LeftLungCoor_x))./grid_size(g));
                    number_y_left = ceil((max(LeftLungCoor_y) - min(LeftLungCoor_y))./grid_size(g));
                    number_x_right = ceil((max(RightLungCoor_x) - min(RightLungCoor_x))./grid_size(g));
                    number_y_right = ceil((max(RightLungCoor_y) - min(RightLungCoor_y))./grid_size(g));
                    
                    average_grid_density_left = [];
                    average_grid_density_right = [];
                    
                    % Cal average density for left lung
                    if grid_size(g) == 1
                        average_grid_density_left = Left_density_value;
                        average_grid_density_right = Right_density_value;
                    else
                        for i = 1:number_x_left
                            for j = 1:number_y_left
                                x_min = min(LeftLungCoor_x) + (i-1).*grid_size(g);
                                y_min = min(LeftLungCoor_y) + (j-1).*grid_size(g);
                                x_max = min(LeftLungCoor_x) + i.*grid_size(g);
                                y_max = min(LeftLungCoor_y) + j.*grid_size(g);
                                if x_max > max(LeftLungCoor_x)
                                    x_max = max(LeftLungCoor_x);
                                end
                                if y_max > max(LeftLungCoor_y)
                                    y_max = max(LeftLungCoor_y);
                                end
                                x_index = find(LeftLungCoor_x>=x_min & LeftLungCoor_x<=x_max);
                                y_index = find(LeftLungCoor_y>=y_min & LeftLungCoor_y<=y_max);
                                current_index_left = intersect(x_index, y_index);
                                if ~isempty(current_index_left)
                                    current_average_density = sum(Left_density_value(current_index_left))./length(current_index_left);
                                    average_grid_density_left = [average_grid_density_left,current_average_density];
                                end
                            end
                        end
                        
                        % Cal average density for right lung
                        for i = 1:number_x_right
                            for j = 1:number_y_right
                                x_min = min(RightLungCoor_x) + (i-1).*grid_size(g);
                                y_min = min(RightLungCoor_y) + (j-1).*grid_size(g);
                                x_max = min(RightLungCoor_x) + i.*grid_size(g);
                                y_max = min(RightLungCoor_y) + j.*grid_size(g);
                                if x_max > max(RightLungCoor_x)
                                    x_max = max(RightLungCoor_x);
                                end
                                if y_max > max(RightLungCoor_y)
                                    y_max = max(RightLungCoor_y);
                                end
                                x_index = find(RightLungCoor_x>=x_min & RightLungCoor_x<=x_max);
                                y_index = find(RightLungCoor_y>=y_min & RightLungCoor_y<=y_max);
                                current_index_right = intersect(x_index, y_index);
                                if ~isempty(current_index_right)
                                    current_average_density = sum(Right_density_value(current_index_right))./length(current_index_right);
                                    average_grid_density_right = [average_grid_density_right,current_average_density];
                                end
                            end
                        end
                    end
                    total_average_grid_density = [average_grid_density_left, average_grid_density_right];
                    current_std = std(total_average_grid_density);
                    current_mean = mean(total_average_grid_density);
                    cov_matrix(g) = current_std./current_mean;
                end
                % Plot the fractal dimension curve
                grid_size 
                cov_matrix
                log_size = log(grid_size');
                log_cov = log(cov_matrix);
                p = polyfit(log_size,log_cov,1)
                fractal_dimension = 1- p(1)
                figure();
                set(gca,'Fontsize',20)
                plot(log_size,log_cov,'*b');
                hold on
                x=0:0.1:3.5;
                text_content = strcat('FD = ',num2str(fractal_dimension));
                plot(x, polyval(p, x),'-r');
                y = polyval(p, x);
                text(x(12),y(12),strcat(' \leftarrow', text_content))
                xlabel('Log Box Size');
                ylabel('Log Cov');
                title_name = strcat('Slice ', ' ', num2str(s), ' Fractal Dimension');
                title(title_name);
                figure_name = strcat('Slice',num2str(s), 'FractalDimension');
                save_image_full_path = strcat(save_full_path,'/',figure_name,'.jpg');
                saveas(gcf, save_image_full_path);
                set(gcf,'visible','off');
                
                % Show the current raw slice
                current_raw = Raw(:,:,s);
                current_lung = Lung(:,:,s);
                current_raw(current_lung==0) = 0;
                figure,imshow(current_raw,[])
                save_image_full_path = strcat(save_full_path,'/','Slice', num2str(s),'RawImage.jpg');
                saveas(gcf, save_image_full_path);
                set(gcf,'visible','off');
            end
            results = lungs.Copy;
        end
    end
end
