classdef MYOutputLungDensity < PTKPlugin
    % MYOutputLungData. Plugin for outputing the lung segmentation result and
    % saved as exdata format
    %
    %     This is a plugin for a self-built function of the Pulmonary Toolkit. Plugins can be run using
    %     the gui, or through the interfaces provided by the Pulmonary Toolkit.
    %     See PTKPlugin.m for more information on how to run plugins.
    %
    %     Plugins should not be run directly from your code.
    %
    %     The output image generated by GenerateImageFromResults creates a
    %     colour-coded segmentation image with true airway points shown as blue
    %     and explosion points shown in red.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %
    
    properties
        ButtonText = 'Output Lung Density'
        ToolTip = 'Output Lung segmentation data cloud with density information and convert it into exdata and ipdata'
        Category = 'Export'
        
        AllowResultsToBeCached = true
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = false
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = true
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results=RunPlugin(dataset,reporting)
           if nargin < 2
               reporting = PTKReportingDefault
           end
            
          lung_roi = dataset.GetResult('PTKLungROI')
          Raw = lung_roi.RawImage;
          lungs=dataset.GetResult('PTKLeftAndRightLungs');
          Lung=lungs.RawImage;
          [a1,b1,c1]=size(Lung);
          LeftLungCoor_x=[];RightLungCoor_x=[];
          LeftLungCoor_y=[];RightLungCoor_y=[];
          LeftLungCoor_z=[];RightLungCoor_z=[];
          Left_density_value=[];Right_density_value=[];
          
          n=3; % voxel size;
          
          for i=2:c1-1
              for j=2:n:a1-1
                  for k=2:n:b1-1
                      if Lung(j,k,i)==2
                          LeftLungCoor_x=[LeftLungCoor_x,j];
                          LeftLungCoor_y=[LeftLungCoor_y,k];
                          LeftLungCoor_z=[LeftLungCoor_z,i];
                          
                          HU_value = lungs.GrayscaleToRescaled(Raw(j-1:j+1,k-1:k+1,i-1:i+1));
                          HU_value=mean(mean(mean(HU_value)));
                          density_value = double(HU_value)/1024+1;
                          Left_density_value= [Left_density_value,density_value];
                      elseif Lung(j,k,i)==1
                          RightLungCoor_x=[RightLungCoor_x,j];
                          RightLungCoor_y=[RightLungCoor_y,k];
                          RightLungCoor_z=[RightLungCoor_z,i];
                          HU_value = lungs.GrayscaleToRescaled(Raw(j-1:j+1,k-1:k+1,i-1:i+1));
                          
                          
                          HU_value=mean(mean(mean(HU_value)));
                          density_value = double(HU_value)/1024+1;
                          Right_density_value= [Right_density_value,density_value];
                      end
                  end
              end
          end
          
          VoxelSize=lungs.VoxelSize;
          OriginalImageSize=lungs.OriginalImageSize;
          start_crop=lungs.Origin;
          LeftLungCoor_x1=(LeftLungCoor_y+start_crop(2)-1).*VoxelSize(2);
          LeftLungCoor_y1=OriginalImageSize(2).*VoxelSize(2)-(OriginalImageSize(1)-(LeftLungCoor_x+start_crop(1)-1)).*VoxelSize(1);
          LeftLungCoor_z1=-(LeftLungCoor_z+start_crop(3)-1).*VoxelSize(3);
          RightLungCoor_x1=(RightLungCoor_y+start_crop(2)-1).*VoxelSize(2);
          RightLungCoor_y1=OriginalImageSize(2).*VoxelSize(2)-(OriginalImageSize(1)-(RightLungCoor_x+start_crop(1)-1)).*VoxelSize(1);
          RightLungCoor_z1=-(RightLungCoor_z+start_crop(3)-1).*VoxelSize(3);
          
          LeftLungCoor=[LeftLungCoor_x1',LeftLungCoor_y1',LeftLungCoor_z1'];
          RightLungCoor=[RightLungCoor_x1',RightLungCoor_y1',RightLungCoor_z1'];
          
          % Get the saving path
          data_info=dataset.GetImageInfo;
          current_data_path=data_info.ImagePath;
          save_root_path = uigetdir(current_data_path, 'Select Directory to Save Lung Surface Points');
          save_full_path=fullfile(save_root_path,'PTKLungDensity');
          if ~exist(save_full_path)
              mkdir(save_full_path);
          end
          
          %             MYWriteExdata('LungDensity_Lefttrimmed.exdata',LeftLungCoor,'Left_density_value',100000,save_full_path);
          MYExportField('LungDensity_Lefttrimmed.exdata',LeftLungCoor,Left_density_value,'Density_Left',0,save_full_path);
          MYFieldIpdata('LungDensity_Lefttrimmed.ipdata',LeftLungCoor,Left_density_value,'Density_Left',0,save_full_path);
          offset = length(LeftLungCoor) + 100;
          MYExportField('LungDensity_Righttrimmed.exdata',RightLungCoor,Right_density_value,'Density_Right',offset,save_full_path);
          MYFieldIpdata('LungDensity_Righttrimmed.ipdata',RightLungCoor,Right_density_value,'Density_Right',offset,save_full_path);
          results = lungs.Copy;
        end
    end
end
